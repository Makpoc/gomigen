// Code generated by middleware generator version "test" DO NOT EDIT.

package interfacesmw

import (
	"context"

	"github.com/Makpoc/gomigen/test/integration/testdata/tabletests/interfaces"
	"github.com/Makpoc/gomigen/types"
)

type SingleMethodWithArgNoReturnsMiddleware struct {
	next interfaces.SingleMethodWithArgNoReturns
	hook types.Hook
}

// if this check fails middleware needs to be re-generated.
var _ interfaces.SingleMethodWithArgNoReturns = (*SingleMethodWithArgNoReturnsMiddleware)(nil)

func NewSingleMethodWithArgNoReturnsMiddleware(
	next interfaces.SingleMethodWithArgNoReturns,
	hook types.Hook,
) *SingleMethodWithArgNoReturnsMiddleware {
	return &SingleMethodWithArgNoReturnsMiddleware{
		next: next,
		hook: hook,
	}
}

func (mw *SingleMethodWithArgNoReturnsMiddleware) Process(arg0 int) {
	methodInfo := types.MethodInfo{
		Package:   "github.com/Makpoc/gomigen/test/integration/testdata/tabletests/interfaces",
		Interface: "SingleMethodWithArgNoReturns",
		Method:    "Process",
		Params:    []interface{}{arg0},
	}

	ctx := context.Background()

	ctx = mw.hook.OnEntry(ctx, methodInfo)
	mw.next.Process(arg0)
	mw.hook.OnExit(ctx, methodInfo, nil)
}
