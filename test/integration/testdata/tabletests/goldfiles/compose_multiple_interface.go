// Code generated by middleware generator version "test" DO NOT EDIT.

package interfacesmw

import (
	"context"

	"github.com/Makpoc/gomigen/test/integration/testdata/tabletests/interfaces"
	"github.com/Makpoc/gomigen/types"
)

type ComposeMultipleInterfaceMiddleware struct {
	next interfaces.ComposeMultipleInterface
	hook types.Hook
}

// if this check fails middleware needs to be re-generated.
var _ interfaces.ComposeMultipleInterface = (*ComposeMultipleInterfaceMiddleware)(nil)

func NewComposeMultipleInterfaceMiddleware(
	next interfaces.ComposeMultipleInterface,
	hook types.Hook,
) *ComposeMultipleInterfaceMiddleware {
	return &ComposeMultipleInterfaceMiddleware{
		next: next,
		hook: hook,
	}
}

func (mw *ComposeMultipleInterfaceMiddleware) ProcessInner(arg0 /* ctx */ context.Context) error {
	methodInfo := types.MethodInfo{
		Package:   "github.com/Makpoc/gomigen/test/integration/testdata/tabletests/interfaces",
		Interface: "ComposeMultipleInterface",
		Method:    "ProcessInner",
	}

	ctx := arg0

	ctx = mw.hook.OnEntry(ctx, methodInfo)
	res0 := mw.next.ProcessInner(ctx)
	mw.hook.OnExit(ctx, methodInfo, res0)
	return res0
}
func (mw *ComposeMultipleInterfaceMiddleware) Write(arg0 /* p */ []byte) (int /* n */, error /* err */) {
	methodInfo := types.MethodInfo{
		Package:   "github.com/Makpoc/gomigen/test/integration/testdata/tabletests/interfaces",
		Interface: "ComposeMultipleInterface",
		Method:    "Write",
	}

	ctx := context.Background()

	ctx = mw.hook.OnEntry(ctx, methodInfo)
	res0, res1 := mw.next.Write(arg0)
	mw.hook.OnExit(ctx, methodInfo, res1)
	return res0, res1
}
