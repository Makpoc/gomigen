// Code generated by middleware generator version "test" DO NOT EDIT.

package interfacesmw

import (
	"context"

	"github.com/Makpoc/gomigen/test/integration/testdata/tabletests/interfaces"
	"github.com/Makpoc/gomigen/types"
)

type TwoMethodsOneWithContextAndErrorMiddleware struct {
	next interfaces.TwoMethodsOneWithContextAndError
	hook types.Hook
}

// if this check fails middleware needs to be re-generated.
var _ interfaces.TwoMethodsOneWithContextAndError = (*TwoMethodsOneWithContextAndErrorMiddleware)(nil)

func NewTwoMethodsOneWithContextAndErrorMiddleware(
	next interfaces.TwoMethodsOneWithContextAndError,
	hook types.Hook,
) *TwoMethodsOneWithContextAndErrorMiddleware {
	return &TwoMethodsOneWithContextAndErrorMiddleware{
		next: next,
		hook: hook,
	}
}

func (mw *TwoMethodsOneWithContextAndErrorMiddleware) ProcessOne(arg0 context.Context, arg1 string) (string, error) {
	methodInfo := types.MethodInfo{
		Package:   "github.com/Makpoc/gomigen/test/integration/testdata/tabletests/interfaces",
		Interface: "TwoMethodsOneWithContextAndError",
		Method:    "ProcessOne",
		Params:    []interface{}{arg0, arg1},
	}

	ctx := arg0

	ctx = mw.hook.OnEntry(ctx, methodInfo)
	res0, res1 := mw.next.ProcessOne(ctx, arg1)
	mw.hook.OnExit(ctx, methodInfo, res1)
	return res0, res1
}
func (mw *TwoMethodsOneWithContextAndErrorMiddleware) ProcessTwo(arg0 /* argInt */ int) int /* returnInt */ {
	methodInfo := types.MethodInfo{
		Package:   "github.com/Makpoc/gomigen/test/integration/testdata/tabletests/interfaces",
		Interface: "TwoMethodsOneWithContextAndError",
		Method:    "ProcessTwo",
		Params:    []interface{}{arg0},
	}

	ctx := context.Background()

	ctx = mw.hook.OnEntry(ctx, methodInfo)
	res0 := mw.next.ProcessTwo(arg0)
	mw.hook.OnExit(ctx, methodInfo, nil)
	return res0
}
