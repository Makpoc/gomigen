// Code generated by middleware generator version "test" DO NOT EDIT.

package packagecollisionmw

import (
	"context"

	"github.com/Makpoc/gomigen/test/integration/testdata/packagecollision"
	"github.com/Makpoc/gomigen/test/integration/testdata/packagecollision/a/foo"
	foo0 "github.com/Makpoc/gomigen/test/integration/testdata/packagecollision/b/foo"
	foo1 "github.com/Makpoc/gomigen/test/integration/testdata/packagecollision/dotimported/foo"
	foo2 "github.com/Makpoc/gomigen/test/integration/testdata/packagecollision/renamedpackage/bar"
	"github.com/Makpoc/gomigen/types"
)

type CompareMiddleware struct {
	next packagecollision.Compare
	hook types.Hook
}

// if this check fails middleware needs to be re-generated.
var _ packagecollision.Compare = (*CompareMiddleware)(nil)

func NewCompareMiddleware(
	next packagecollision.Compare,
	hook types.Hook,
) *CompareMiddleware {
	return &CompareMiddleware{
		next: next,
		hook: hook,
	}
}

func (mw *CompareMiddleware) Equals(arg0 foo.Foo, arg1 foo0.Foo, arg2 foo1.Foo, arg3 foo2.Foo) bool {
	methodInfo := types.MethodInfo{
		Package:   "github.com/Makpoc/gomigen/test/integration/testdata/packagecollision",
		Interface: "Compare",
		Method:    "Equals",
		Params:    []interface{}{arg0, arg1, arg2, arg3},
	}

	ctx := context.Background()

	ctx = mw.hook.OnEntry(ctx, methodInfo)
	res0 := mw.next.Equals(arg0, arg1, arg2, arg3)
	mw.hook.OnExit(ctx, methodInfo, nil)
	return res0
}
