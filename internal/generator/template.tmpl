// Code generated by middleware generator version "{{version}}" DO NOT EDIT.

package {{.GenPackage}}

import (
	{{- range $pkg := .UniqueImportPaths}}
	{{$pkg.Alias}} "{{$pkg.Package}}"
	{{- end}}
)

type {{.MiddlewareName}} struct {
	next {{.OriginalPackage.Name}}.{{.InterfaceName}}
	hook {{.GetMiddlewareTypesPackageAlias}}.Hook
}

// if this check fails middleware needs to be re-generated.
var _ {{.OriginalPackage.Name}}.{{.InterfaceName}} = (*{{.MiddlewareName}})(nil)

func New{{.MiddlewareName}}(
		next {{.OriginalPackage.Name}}.{{.InterfaceName}},
		hook {{.GetMiddlewareTypesPackageAlias}}.Hook,
) *{{.MiddlewareName}} {
	return &{{.MiddlewareName}} {
		next: next,
		hook: hook,
	}
}
{{ range .Methods }}
func (mw *{{$.MiddlewareName}}) {{.Name}}({{.Arguments.ForMethodSignature}}) ({{.Returns.ForMethodSignature}}) {
	methodInfo := {{$.GetMiddlewareTypesPackageAlias}}.MethodInfo{
		Package: "{{$.OriginalPackage.Path}}",
		Interface: "{{$.InterfaceName}}",
		Method: "{{.Name}}",
	}

	ctx := {{if .Arguments.ContextVarName}}{{.Arguments.ContextVarName}}{{else}}context.Background(){{end}}

	ctx = mw.hook.OnEntry(ctx, methodInfo)

	{{- if .Returns }}
		{{.Returns.ReturnVarNames}} := mw.next.{{.Name}}({{if .Arguments.ContextVarName}}ctx, {{end}}{{.Arguments.ForMethodInvocationWithoutContext}})
		{{- if not .Returns.LastVarTypeIsError}}
			mw.hook.OnExit(ctx, methodInfo, nil)
		{{- else}}
			mw.hook.OnExit(ctx, methodInfo, {{.Returns.ErrorVarName }})
		{{- end}}
		return {{.Returns.ReturnVarNames}}
	{{- else }}
		mw.next.{{.Name}}({{if .Arguments.ContextVarName}}ctx, {{end}}{{.Arguments.ForMethodInvocationWithoutContext}})
		mw.hook.OnExit(ctx, methodInfo, nil)
	{{- end}}
}
{{- end}}
